row.genes
if(length(row.genes)>1)
i=1
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
if(length(row.genes)>=1)
for (j in row.genes){
egf_genes[i] = row.genes[j]
}
i=1
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
for (j in length(row.genes){
egf_genes[i] = row.genes[j]
}
Gene.Name = egf_pathway$Gene.Name
for (i in length(egf_pathway$Gene.Name)){
i=1
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
row.genes[j]
}}
j=1
row.genes[j]
row.genes[[j]]
i=1
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
for (j in length(row.genes){
egf_genes[i] = row.genes[[j]]
}
i=1
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
for (j in length(row.genes){
egf_genes[i] = row.genes[[j]]
}
}
for (i in length(egf_pathway$Gene.Name)){
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
for (j in length(row.genes){
egf_genes[i] = row.genes[[j]]
}
}
for (i in length(egf_pathway$Gene.Name)){
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=",",fixed=T)
for (j in length(row.genes)){
egf_genes[i] = row.genes[[j]]
}
}
View(egf_pathway)
for (i in length(egf_pathway$Gene.Name)){
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
for (j in length(row.genes)){
egf_genes[i] = row.genes[[j]]
}
}
row.genes
Gene.Name
Gene.Name = as.character(Gene.Name)
Gene.Name
Gene.Name = egf_pathway$Gene.Name
Gene.Name
unlist(Gene.Name)
list(Gene.Name)
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes
as.vector(row.genes)
as.character(row.genes)
as.data.frame(row.genes)
row.genes = as.data.frame(row.genes)
View(row.genes)
length(row.genes[,1]
)
egf_genes[i:j] = row.genes[i:j]
i=2
j = length(row.genes[,1])
egf_genes[i:j] = row.genes[i:j]
egf_genes[i:j] = row.genes[i:j]
egf_genes[i:j] = row.genes[i:j,1]
egf_genes
row.genes[i:j,1]
egf_genes[i:j] = levels(row.genes[,1])
egf_genes = levels(row.genes[,1])
egf_genes
Gene.Name = egf_pathway$Gene.Name
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
egf_genes = rbind(egf_genes,levels(row.genes[,1]))
egf_genes = rbind(egf_genes,levels(row.genes))
View(egf_genes)
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
egf_genes = rbind(egf_genes,levels(row.genes))
View(egf_genes)
egf_genes = rbind(egf_genes,row.genes)
colnames(egf_genes)
colnames(egf_genes) = "Genes"
colnames(egf_genes)
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
View(egf_genes)
egf_pathway = read.csv("JHMI/EGF_pathway.csv")
Gene.Name = egf_pathway$Gene.Name
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
View(egf_genes)
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in 2:length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
View(egf_genes)
egf_genes = gsub("\\s","",egf_genes)
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in 2:length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
egf_genes = gsub(" ","",egf_genes)
egf_genes
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in 2:length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
egf_genes
egf_genes = gsub("^\\s+|\\s+$", "", x=egf_genes)
egf_genes
Gene.Name = egf_pathway$Gene.Name
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in 2:length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
egf_genes$Genes
egf_genes = gsub("^\\s+|\\s+$", "", x=egf_genes$Genes)
Gene.Name = egf_pathway$Gene.Name
egf_genes = strsplit(x=as.character(Gene.Name[1]),split=", ",fixed=T)
egf_genes = data.frame(egf_genes)
colnames(egf_genes) = "Genes"
for (i in 2:length(egf_pathway$Gene.Name)){
#  i=2
row.genes = strsplit(x=as.character(Gene.Name[i]),split=", ",fixed=T)
row.genes = as.data.frame(row.genes)
colnames(row.genes) = "Genes"
egf_genes = rbind(egf_genes,row.genes)
}
egf_genes$Genes
egf_genes = gsub(" ", "", x=egf_genes$Genes)
egf_genes = data.frame(Genes = unique(gsub(" ", "", x=egf_genes$Genes)))
(gsub(" ", "", x=egf_genes$Genes)
)
unique(gsub(" ", "", x=egf_genes$Genes))
egf_genes = unique(egf_genes)
View(egf_pathway)
gold_04 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs//dmrs_gldStd0_vs_gldStd4.csv")
View(gold_04)
library(BiocInstaller)
library(BiocGenerics)
gold_04 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs//dmrs_gldStd0_vs_gldStd4.csv")
gold_02 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs/dmrs_gldStd0_vs_gldStd2.csv)
egf_04 = BiocGenerics::intersect(x=egf_genes,gold_04$name)
)
()
""
"
egf_04 = BiocGenerics::intersect(x=egf_genes,gold_04$name)
gold_04$name
gold_04$name%in%egf_genes
table(gold_04$name%in%egf_genes)
gold_02 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs/dmrs_gldStd0_vs_gldStd2.csv")
egf_02 = BiocGenerics::intersect(x=egf_genes,gold_02$name)
egf_24 = BiocGenerics::intersect(x=egf_genes,gold_24$name)
gold_24 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs/dmrs_gldStd2_vs_gldStd4.csv")
egf_24 = BiocGenerics::intersect(x=egf_genes,gold_24$name)
table(egf_pathway$Symbol%in%gold_04)
table(egf_pathway$Symbol%in%gold_02)
table(egf_pathway$Symbol%in%gold_24)
table(gold04%in%egf_pathway$Symbol)
gold_04 = read.csv("~/Box Sync/COPD/Comparison Wise DMRs/Comparison Wise DMRs//dmrs_gldStd0_vs_gldStd4.csv")
table(gold_04$name%in%egf_pathway$Symbol)
table(egf_pathway$Symbol%in%gold_04$name)
table(egf_pathway$Symbol%in%gold_02$name)
table(egf_pathway$Symbol%in%gold_24$name)
table(gold_04$name%in%egf_pathway$Symbol)
table(gold_04$name%in%egf_genes)
table(gold_02$name%in%egf_genes)
table(gold_24$name%in%egf_genes)
egf_04
egf_pathway$Symbol == egf_04
table(egf_pathway$Symbol == egf_04)
grep(pattern=egf_04,x=egf_pathway$Gene.Name)
egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),]
grep(egf_04,gold_04$name)
gold_04[grep(egf_04,gold_04$name),]
as.data.frame(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
as.list(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
as.list(as.character(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),]))
as.list(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
as.list(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
as.data.frame(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
View(egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),])
egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),]
found.gene = egf_pathway[grep(pattern=egf_04,x=egf_pathway$Gene.Name),]
write.csv(found.gene,file = "egf_pathway_gene_description.csv")
dmr_egf_pathway_intersect = gold_04[grep(egf_04,gold_04$name),]
write.csv(dmr_egf_pathway_intersect,file = "dmr_for_corresponding_egf_pathway_gene.csv")
getwd()
setwd("~/Documents/GeneExpressionDataAnalysis/affyData/")
date()
rm(list=ls())
require(affy)
require(affy)
require(hgu95a.db)
load("./objs/affyData.rda")
library(knitr)
options(rstudio)
setwd("~/Documents/GeneExpressionDataAnalysis/affyData/")
date()
rm(list=ls())
require(affy)
require(hgu95a.db)
load("./objs/affyData.rda")
ls()
class(dat)
class(dat.rma)
slotNames(dat)
slotNames(dat.rma)
dat.expr <- exprs(dat.rma)
dim(dat.expr)
?AffyBatch
?ExpressionSet
?eSet
dat.expr <- exprs(dat.rma)
dim(dat.expr)
pData(dat.rma)
dat.pm <- pm(dat)
dim(dat.pm)
dat.mm <- mm(dat)
dim(dat.mm)
?par
?MAplot
load("./objs/affyData.rda")
nc <- ceiling(sqrt(ncol(dat.rma)))
nr <- ceiling(ncol(dat.rma)/nc)
ncol(dat.rma)
args(MAplot)
dat[,]
dat[1,]
dat
a <- exprs(dat.rma)
ncol(a)
nrow(a)
?bitmap
?boxplot
?AffyRNAdeg
deg <- AffyRNAdeg(dat)
summaryAffyRNAdeg(deg)
names(deg)
deg$slope
plot(deg$slope)
boxplot(deg$slope)
dateOfScan <- protocolData(dat.rma)@data$ScanDate
#Don't need the time, so we will remove that using regular expressions
dateOfScan <- gsub(" .+", "", dateOfScan)
boxplot(log2(exprs(dat)), col=1+as.numeric(dateOfScan))
dateOfScan
date()
```
Clear the workspace, note the two "embedded" functions
```{r clearWorkSpace,comment=NA}
rm(list=ls())
require(affy)
require(limma)
require(hgu95a.db)
require(annotate)
load("./objs/affyData.rda")
# Load  linear model results
load("./objs/linearModel.rda")
hgu95a()
hgu95aUNIPROT
class(hgu95aUNIPROT)
slotNames(hgu95aUNIPROT)
boxplot(log2(exprs(dat)), col=1+as.numeric(dateOfScan))
load("./objs/affyData.rda")
# Load  linear model results
load("./objs/linearModel.rda")
kegg <- as.list(hgu95aPATH2PROBE)
kegg
colnames(kegg)
class(kegg)
length(kegg)
str(head(kegg))
go <- as.list(hgu95aGO2ALLPROBES)
?geneSetTest
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t)
tG2$t
length(tG2$t)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
```
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="mixed")
summay(tG2$t)
summary(tG2$t)
summary(tG2$ID%in%kegg[[1]])
summary(tG2$t[tG2$ID%in%kegg[[1]]])
plot(tG2$t[tG2$ID%in%kegg[[1]]])
boxplot(tG2$t[tG2$ID%in%kegg[[1]]])
barplot(tG2$t[tG2$ID%in%kegg[[1]]])
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up")
barcodeplot(tG2$t,tG2$ID%in%kegg[[1]])
kegg2 <- kegg[!is.na(kegg)]
gse <- vector()
for (i in 1:length(kegg2)){
gse[i] <- geneSetTest(tG2$ID%in%kegg2[[i]],tG2$t)
names(gse)[i] <- names(kegg2)[i]
}
length(kegg2)
kegg2[[1]]
str(kegg2[[1]])
str(kegg2)
names(gse)
names(gse)[1]
?names
names(gse)
names(dat)
names(eb2.ls)
colnames(eb2.ls)
rownames(eb2.ls)
names(eb2.ls)
p.value(eb2.ls)
pvalue(eb2.ls)
names(x = c(1,2,3))
eb2.ls
names(kegg2)
tmp <- sapply(kegg2, function(gs, stat, ids) {
geneSetTest(ids%in%gs,stat)
}, stat=tG2$t, ids=tG2$ID)
tG2$ID%in%kegg[[1]]
str(gse)
head(gse)
gse <- vector()
for (i in 1:length(kegg)){
#check if all values are NOT true
if (all(!tG2$ID%in%kegg[[i]])) {
gse[i] <- NA
}else{
gse[i] <- geneSetTest(tG2$ID%in%kegg[[i]],tG2$t)
}
names(gse)[i] <- names(kegg)[i]
}
length(gse)
str(gse)
i=10
barcodeplot(tG2$t,tG2$ID%in%kegg[[i]])
tG2$ID%in%kegg[[i]]
kegg[[10]]
tG2$ID%in%kegg[[i]]
tG2$ID[tG2$ID%in%kegg[[i]]]
?barcodeplot
i=which.max(gse)
barcodeplot(tG2$t,tG2$ID%in%kegg[[i]])
i=which.min(gse)
barcodeplot(tG2$t,tG2$ID%in%kegg[[i]])
?geneSetTest
args(geneSetTest)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up",type="t",
ranks.only=FALSE,nsim=1000)
geneSetTest(tG2$ID%in%kegg[[94]],tG2$t,alternative="down",type="t",
ranks.only=FALSE,nsim=1000)
mat <- exprs(dat.rma)
sel <- rownames(mat)%in%kegg[[1]]
newDmat <- data.frame(
Intercept=1,
CellType=dMat2[,1]+dMat2[,2] + (-1* (dMat2[,3]+dMat2[,4]))
)
newDmat
roast( y=mat,index=sel, design=newDmat, contrast=2)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="mixed")
gse.go <- list()
for (i in 1:5){
sel <- rownames(mat)%in%go[[i]]
gse.go[[i]] <- roast(mat,index=sel, design=newDmat, contrast=2)
names(gse.go)[i] <- names(go)[i]
}
library(KEGG.db)
library(GO.db)
installedPckgs <- installed.packages()[,"Package"]
# Here we define the list of desired libraries
pckgListBIOC <- c("KEGG.db")
# We source the biocLite.R script from the Bioconductor website
source("http://bioconductor.org/biocLite.R")
# Load the packages, or install them from Bioconductor if needed
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) biocLite(pckg)
require(pckg, character.only=TRUE)
}
require("KEGG.db")
KEGG()
GO()
pathNames <- mget(names(gse), KEGGPATHID2NAME, ifnotfound=NA)
goNames <- mget(names(gse.go),GOTERM,ifnotfound=NA)
goNames <- lapply(goNames,Term)
?Term
print(pathNames)
print(goNames)
pathNames[names(pathNames)==names(gse[which.min(gse)])]
pathNames[which.min(gse)]
pathNames2 <- pathNames[length(pathNames):1]
pathNames2[names(pathNames2)==names(gse[which.min(gse)])]
pathNames2[which.min(gse)]
pathNames[gse<1e-5]
index <- which(gse<1e-2)
myFGS <- kegg[index]
sum(myFGS[[1]]%in%myFGS[[2]])
all <- unique(unlist(myFGS))
table(fgs1=all%in%myFGS[[1]],fgs2=all%in%myFGS[[2]])
vennDiagram(data.frame(fgs1=all%in%myFGS[[1]],
fgs2=all%in%myFGS[[2]],fgs3=all%in%myFGS[[3]]))
library(multtest)
adjp <- mt.rawp2adjp(gse)
adjp
adjp <- adjp$adjp[order(adjp$index),]
# Bonferroni only
adjp <- mt.rawp2adjp(gse,proc="Bonferroni")
adjp <- adjp$adjp[order(adjp$index),]
adjp <- mt.rawp2adjp(gse,proc="BH")
adjp <- adjp$adjp[order(adjp$index),]
hist(adjp[,1], nclass=20)
hist(adjp[,2],nclass=20,add=TRUE,col="blue")
source("code/03_dge2gsa.R")
source("code/03_dge2gsa.R")
