getwd()
getwd()
setwd("~/Documents/GeneExpressionDataAnalysis/affyData/")
getwd()
getwd()
setwd("~/Documents/GeneExpressionDataAnalysis/affyData/")
date()
rm(list=ls())
require(affy)
require(hgu95a.db)
load("./objs/affyData.rda")
class(dat)
class(dat.rma)
slotNames(dat)
slotNames(dat.rma)
dat.expr <- exprs(dat.rma)
dim(dat.expr)
$M = log_{2}(R/G) = log_{2}(R) - log_{2}(G)$
mypar <- function (nRow = 1, nCol = 1, ptsExp = 1) {
par(mar = c(2, 2, 2, 1))
par(oma = c(2, 1, 1, 1))
par(mfrow = c(nRow, nCol))
par(cex = ptsExp)
}
?plot
?cex
?par
nc <- ceiling(sqrt(ncol(dat.rma)))
nr <- ceiling(ncol(dat.rma)/nc)
nc
nr
dim(dat.rma)
mypar(nr,nc,0.5)
MAplot(dat[,],pairs=F,plot.method="smoothScatter")
bitmap(file="./figs/MApl.raw.png",width=20, height=10, res = 400)
mypar(nr,nc,0.5)
par(oma=c(2,1,1,1))
MAplot(dat[,],pairs=F,plot.method="smoothScatter")
dev.off()
mypar(nr,nc,0.5)
par(oma=c(2,1,1,1))
a <- exprs(dat.rma)
for (i in 1:ncol(a)){
ma.plot(A=((a[,i]+apply(a,1,median))/2),
M=(a[,i]-apply(a,1,median)),
show.statistics=TRUE,cex.main=1,
span=1/3, family.loess="gaussian", cex = 0.75,
plot.method="smoothScatter",add.loess = TRUE,
lwd = 2, lty = 2, loess.col = "red",ylim=c(-6,6),
main=paste(colnames(a)[i],
'\n vs pseudo-median reference chip'))
}
bitmap(file='./figs/MApl.rma.png',width=20,height=10,res=400)
mypar(nr,nc,0.5)
par(oma=c(2,1,1,1))
a <- exprs(dat.rma)
for (i in 1:ncol(a)){
ma.plot(A=((a[,i]+apply(a,1,median))/2),
M=(a[,i]-apply(a,1,median)),
show.statistics=TRUE,cex.main=1,
span=1/3, family.loess="gaussian", cex = 0.75,
plot.method="smoothScatter",add.loess = TRUE,
lwd = 2, lty = 2, loess.col = "red",ylim=c(-6,6),
main=paste(colnames(a)[i],
'vs pseudo-median reference chip'))
}
dev.off()
bitmap(file="./figs/ima2D.png",width=2*nr, height=2*nc, res = 144)
mypar(nr,nc,1) ; par(mar=c(1,1,1,1))
image(dat[,])
dev.off()
deg <- AffyRNAdeg(dat)
deg
str(deg)
bitmap(file="./figs/degRNA.png",width=5, height=5, res = 1000)
mypar(2,2,0.75)
plotAffyRNAdeg(deg,cols=c(1:ncol(dat.rma)))
plot(density(deg$slope),main="Slope")
boxplot(deg$slope,main="Slope")
### Close the device
dev.off()
dateOfScan <- protocolData(dat.rma)@data$ScanDate
dateOfScan
dateOfScan <- gsub(" .+", "", dateOfScan)
dateOfScan
boxplot(log2(exprs(dat)), col=1+as.numeric(dateOfScan))
dev.off()
require(affy)
require(limma)
require(hgu95a.db)
require(annotate)
hgu95a()
kegg <- as.list(hgu95aPATH2PROBE)
kegg
go <- as.list(hgu95aGO2ALLPROBES)
hgu95a()
head(do)
head(go)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t)
load("./objs/affyData.rda")
load("./objs/linearModel.rda")
tG2$ID
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t)
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="down")
geneSetTest(tG2$ID%in%kegg[[1]],tG2$t,alternative="up")
barcodeplot(tG2$ID%in%kegg[[1]],tG2$t)
?barcodeplot
tG2$ID%in%kegg[[1]]
tG2$ID%in%kegg[[1]]
length(tG2$ID%in%kegg[[1]])
tG2$ID%in%kegg[[1]] == FALSE
table(tG2$ID%in%kegg[[1]])
barcodeplot(tG2$ID%in%kegg[[1]],tG2$t)
barcodeplot(as.numeric(tG2$ID%in%kegg[[1]]),tG2$t)
kegg2 <- kegg[!is.na(kegg)]
gse <- vector()
for (i in 1:length(kegg2)){
gse[i] <- geneSetTest(tG2$ID%in%kegg2[[i]],tG2$t)
names(gse)[i] <- names(kegg2)[i]
}
### This is an alternative
tmp <- sapply(kegg2, function(gs, stat, ids) {
geneSetTest(ids%in%gs,stat)
}, stat=tG2$t, ids=tG2$ID)
tmp
gse
tmp == gse
table(tmp == gse)
str(gse)
head(gse)
gse <- vector()
for (i in 1:length(kegg)){
if (all(!tG2$ID%in%kegg[[i]])) {
gse[i] <- NA
}else{
gse[i] <- geneSetTest(tG2$ID%in%kegg[[i]],tG2$t)
}
names(gse)[i] <- names(kegg)[i]
}
length(gse)
str(gse)
i=10
barcodeplot(tG2$ID%in%kegg[[i]],tG2$t)
all
?all
all(!tG2$ID%in%kegg[[i]])
all(tG2$ID%in%kegg[[i]])
args(geneSetTest)
library(GenomicRanges); library(Rsamtools);
source("http://bioconductor.org/biocLite.R")
###Get the list of available packages
installedPckgs <- installed.packages()[,"Package"]
###Define the list of desired libraries
pckgListBIOC <- c("BiocGenerics", "Biobase", "limma", "RTopper",
"org.Hs.eg.db", "AnnotationDbi", "annotate",
"multtest", "KEGG.db", "GO.db")
###Load the packages, install them from Bioconductor if needed
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) {
biocLite(pckg, suppressUpdates=TRUE, ask=FALSE)
}
require(pckg, character.only=TRUE)
}
require(RTopper)
data(sepScores)
ls()
class(sepScores)
names(sepScores)
sapply(sepScores, class)
sapply(sepScores,dim)
data(sepScores)
ls()
require(RTopper)
data(sepScores)
ls()
class(sepScores)
names(sepScores)
sapply(sepScores, class)
sapply(sepScores,dim)
require(org.Hs.eg.db)
org.Hs.eg()
kegg <- as.list(org.Hs.egPATH2EG)
length(kegg)
str(kegg[1:5])
names(kegg)[1:5]
go <- as.list(org.Hs.egGO2ALLEGS)
length(go)
str(go[1:5])
names(go)[1:5]
numberOfFGSkegg <- 200
kegg <- lapply(kegg[sample(1:length(kegg),numberOfFGSkegg)],
function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
str(kegg[1:5])
### Process GO: keep only Biological Process
length(go)
go <- go[ Ontology(names(go)) == "BP" ]
length(go)
numberOfFGSgo <- 200
go <- lapply(go[sample(1:length(go),numberOfFGSgo)],
function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
str(go[1:5])
require(KEGG.db)
KEGG()
names(kegg) <- paste(names(kegg),unlist(mget(names(kegg),KEGGPATHID2NAME)),sep=".")
head(names(kegg), n=10)
fgsList <- list(go=go,kegg=kegg)
str(fgsList$go[1:5])
str(fgsList$kegg[1:5])
args(runBatchGSE)
testFile <- system.file("bam", "isowt5_13e.bam", package = "leeBamViews")
library(GenomicRanges); library(Rsamtools);
library(leeBamViews) # Load required libraries.
biocLite("leeBamViews")
library(leeBamViews) # Load required libraries.
testFile <- system.file("bam", "isowt5_13e.bam", package = "leeBamViews")
?readBamGappedAlignments
str(gseUP.sep[1:5])
head(gseABSsim.sep$dat.affy$go)
head(gseABSsim.sep$dat.affy$kegg)
