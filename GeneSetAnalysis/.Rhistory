library(cacheSweave)
q()
n
help.start()
ls()
plot(mean(torino[,3:21]),mean(inter[,3:21]))
inter <- read.table(file='./soccerData/Inter.txt',sep='\t',
header=TRUE,stringsAsFactors=FALSE)
torino <- read.table(file='./soccerData/Torino.txt',sep='\t',
header=TRUE,stringsAsFactors=FALSE)
plot(mean(torino[,3:21]),mean(inter[,3:21]))
mean(torino[,3:21])
str(torino)
plot(colMeans(torino[,3:21], ),colMeans(inter[,3:21]))
plot(colMeans(torino[,3:21], ),colMeans(inter[,3:21]))
boxplot(cbind(colMeans(torino[,3:21]),colMeans(inter[,3:21])))
boxplot(cbind(Torino = colMeans(torino[,3:21]), Inter = colMeans(inter[,3:21])),
col=c("orange","blue"), main="Comparing Inter and Torino")
search()
require(RTopper)
install.packages("RTopper")
library(BiocInstaller)
biocLite("RTopper")
require(org.Hs.eg.db)
require(reactome.db)
autismGenes <- read.table("myData/101symbols_v02.txt", sep="\t", header=TRUE)
str(autismGenes)
autismGenes <- read.table("myData/101symbols_v02.txt", sep="\t", header=TRUE,
colClasses="character")
str(autismGenes)
library(RTopper)
data(sepScores)
str(sepScores)
allGenes <- unique(unlist(as.list(org.Hs.egSYMBOL)))
formatGeneList <- function (geneList, allGenes) {
stats <- allGenes %in% geneList
out <- data.frame(SYMBOLS = allGenes, Statistics = stats)
}
<<formatTheGeneLsit,echo=TRUE,eval=TRUE,cache=FALSE>>=
allGenes <- unique(unlist(as.list(org.Hs.egSYMBOL)))
geneMembership <- formatGeneList(allGenes, autismGenes)
str(geneMembership)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- data.frame(SYMBOLS = allGenes, Statistics = stats)
}
geneMembership <- formatGeneList(allGenes, autismGenes)
str(geneMembership)
summary(geneMembership)
table(geneMembership$Statistics)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- data.frame(SYMBOLS = allGenes, Statistics = stats)
}
allGenes <- unique(unlist(as.list(org.Hs.egSYMBOL)))
str(allGenes)
str(allGenes, autismGenes)
str(allGenes %in% autismGenes)
table(allGenes %in% autismGenes)
str(autismGenes)
allGenes <- unique(unlist(as.list(org.Hs.egSYMBOL)))
str(allGenes)
geneMembership <- formatGeneList(allGenes, autismGenes$SYMBOL)
str(geneMembership)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- data.frame(SYMBOLS = allGenes, Statistics = stats,
stringsAsFactors=FALSE)
}
geneMembership <- formatGeneList(allGenes, autismGenes$SYMBOL)
str(geneMembership)
table(geneMembership$Statistics)
table(allGenes %in% autismGenes$SYMBOL)
geneMembership <- formatGeneList(autismGenes$SYMBOL, allGenes)
str(geneMembership)
table(geneMembership$Statistics)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- list(GeneList <- data.frame(SYMBOL = allGenes, Statistics = stats,
stringsAsFactors=FALSE))
}
geneMembership <- formatGeneList(autismGenes$SYMBOL, allGenes)
str(geneMembership)
table(geneMembership$Statistics)
names(geneMembership)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- list(GeneList=data.frame(SYMBOL = allGenes, Statistics = stats,
stringsAsFactors=FALSE))
}
names(geneMembership)
str(geneMembership)
formatGeneList <- function (geneList, allGenes) {
stats <- 1* allGenes %in% geneList
out <- list(GeneList=data.frame(SYMBOL = allGenes, Statistics = stats,
stringsAsFactors=FALSE))
}
geneMembership <- formatGeneList(autismGenes$SYMBOL, allGenes)
str(geneMembership)
table(geneMembership$Statistics)
table(geneMembership$GeneList$Statistics)
gseMyList <- runBatchGSE(dataList=geneMembership, fgsList=fgsList,
absolute=FALSE, gseFunc=gseFunc, threshold=0.5)
@
source('~/.active-rstudio-document', echo=TRUE)
str(sepScores)
source('~/.active-rstudio-document', echo=TRUE)
table(geneMembership$GeneList)
gseMyList <- runBatchGSE(dataList=geneMembership, fgsList=fgsList,
absolute=FALSE, gseFunc=gseFunc, threshold=0.5)
str(gseMyList)
str(gseMyList$GeneList$kegg)
summary(gseMyList$GeneList$kegg)
table(gseMyList$GeneList$kegg < 0.1)
table(gseMyList$GeneList$kegg < 0.01)
table(is.na(gseMyList$GeneList$kegg))
gseMyList$GeneList$kegg[ gseMyList$GeneList$kegg < 0.01]
gseMyList$GeneList$go[ gseMyList$GeneList$go < 0.01]
length(gseMyList$GeneList$go[ gseMyList$GeneList$go < 0.01])
gseMyList$GeneList$go[ gseMyList$GeneList$go < 0.01]
gseMyList.BH <- adjustPvalGSE(gseMyList)
str(gseMyList.BH)
str(gseMyList.BH$GeneList$go)
gseMyList.BH$GeneList$go[ gseMyList.BH$GeneList$go[, "BH"] < 0.1 , ]
dim(gseMyList.BH$GeneList$go[ gseMyList.BH$GeneList$go[, "BH"] < 0.1 , ])
dim(gseMyList.BH$GeneList$go[ gseMyList.BH$GeneList$go[, "BH"] < 0.01 , ])
gseMyList.BH$GeneList$go[ gseMyList.BH$GeneList$go[, "BH"] < 0.01 , ]
gseMyList.BH$GeneList$kegg[ gseMyList.BH$GeneList$kegg[, "BH"] < 0.01 , ]
numberOfFGSgo <- 10
go <- lapply(go[sample(1:length(go),numberOfFGSgo)],
function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
go <- as.list(org.Hs.egGO2ALLEGS)
str(go)
length(go)
head(names(go), n=10)
names(go) <- paste(names(go),Term(names(go)),sep=".")
head(names(go), n=10)
?Term
ontology(go)
Ontology(go)
Ontology(names(go))
go <- lapply(go[sample(1:length(go),numberOfFGSgo)],
function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
Ontology(names(go))
names(g)
names(go)
go <- as.list(org.Hs.egGO2ALLEGS)
str(Ontology(names(go)))
length(go)
go <- go[ Ontology(names(go)) == "BP" ]
length(go)
numberOfFGSgo <- 200
go <- lapply(go[sample(1:length(go),numberOfFGSgo)],
function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
str(go[1:5])
library(BiocInstaller)
?biocLite
source("http://bioconductor.org/biocLite.R")
ls()
installedPckgs <- installed.packages()[,"Package"]
pckgListBIOC <- c("BiocGenerics", "Biobase", "limma", "RTopper",
"org.Hs.eg.db", "AnnotationDbi", "annotate",
"multtest", "KEGG.db", "GO.db", "reactome.db")
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) {
biocLite(pckg, type="binary",
suppressUpdates=TRUE, dependency=FALSE)
}
require(pckg, character.only=TRUE)
}
warnings()
###Source the biocLite.R script from Bioconductor
source("http://bioconductor.org/biocLite.R")
###Get the list of available packages
installedPckgs <- installed.packages()[,"Package"]
###Define the list of desired libraries
pckgListBIOC <- c("BiocGenerics", "Biobase", "limma", "RTopper",
"org.Hs.eg.db", "AnnotationDbi", "annotate",
"multtest", "KEGG.db", "GO.db", "reactome.db")
###Load the packages, install them from Bioconductor if needed
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) {
biocLite(pckg, suppressUpdates=TRUE, dependency=FALSE)
}
require(pckg, character.only=TRUE)
}
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) {
biocLite(pckg, suppressUpdates=TRUE,
ask=FALSE, dependency=FALSE)
}
require(pckg, character.only=TRUE)
}
args(biocLite)
character()
?biocLite
biocLite("multtest")
biocLite("multtest", type="binary")
q()
ls()
source("http://bioconductor.org/biocLite.R")
ls()
search()
session.Info()
sessionInfo()
biocinstallRepos
biocinstallRepos()
biocLite("limma")
biocLite("limma", type="binary")
biocLite("limma", suppressUpdates=TRUE, ask=FALSE, dependency=FALSE)
args(biocLite)
biocLite("limma", suppressUpdates=TRUE, ask=FALSE)
biocLite("limma", suppressUpdates=TRUE, ask=FALSE, type="binary")
for (pckg in pckgListBIOC) {
if (! pckg %in% installedPckgs) {
biocLite(pckg, suppressUpdates=TRUE, ask=FALSE)
}
require(pckg, character.only=TRUE)
}
library(BiocInstaller)
source("http://bioconductor.org/biocLite.R")
biocLite("reactome.db", suppressUpdates=TRUE, ask=FALSE)
Stangle("GeneSetAnalysis.Rnw")
