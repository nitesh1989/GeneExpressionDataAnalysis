%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Luigi Marchionni
%% August 19 2013
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%% Begin Document
\documentclass[11pt]{article}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%% Preamble
\usepackage{fullpage}
\usepackage{times}
\usepackage[colorlinks=TRUE, urlcolor=blue, citecolor=blue]{hyperref}
\usepackage[utf8]{inputenc}

%%% Additional packages
\usepackage{Sweave}
\usepackage{authblk}
\usepackage{color}
\usepackage[usenames, dvipsnames]{xcolor}

%%% Sweave options
\SweaveOpts{prefix.string=Figures/plots, eps=FALSE, echo=TRUE, keep.source=TRUE}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% New commands for R stuff
\newcommand{\software}[1]{\textsf{\texttt{#1}}}
\newcommand{\R}{\software{\bf R}}
\newcommand{\Bioc}{\software{Bioconductor}}
\newcommand{\Rcode}[1]{{\texttt{\color{BrickRed}{#1}}}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fancy Sweave
\DefineVerbatimEnvironment{Sinput}{Verbatim}{xleftmargin=1em, fontshape=sl, formatcom=\color{MidnightBlue}, fontsize=\footnotesize}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=1em,fontshape=sl,formatcom=\color{OliveGreen}, fontsize=\footnotesize}
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=1em,fontshape=sl,formatcom=\color{BrickRed}, fontsize=\footnotesize}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Begin document
\begin{document}
\SweaveOpts{concordance=TRUE}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Title of the document

\title{Reproducible Gene Set Analysis with R}

\author{Luigi Marchionni \\
Department of Oncology \\
Johns Hopkins University \\
email: \texttt{marchion@jhu.edu}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Table of contents
\maketitle
\tableofcontents


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Setting options, cleaning the workspace

<<start,eval=TRUE,echo=FALSE,cache=FALSE>>=
options(width=50)
rm(list=ls())
@ 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Introductory considerations
\newpage
\section{Overview}
Gene Set Analysis (GSA) has been widely use to assist the interpretation
of results from gene expression and genomic data analyses.

In today's tutorial we will use {\R} to perform GSA using methods and examples
based on the \Rcode{RTopper} \cite{Tyekucheva2011} and \Rcode{limma} packages
\cite{Smyth2005a,Smyth2004,Smyth2005}.

In particular we will use example data and wrapper functions from \Rcode{RTopper}
in conjuction with the \Rcode{GeneSetTest} function from \Rcode{limma}, 
which enables testing the hypothesis that a specific set of genes
(a Functional Gene Set, FGS) is more highly ranked on a given statistics.
using the Wilcoxon rank-sum test. We will also illustrate alternative
strategies, creating user-defined functions based on the Fisher's exact test.
Overall, this approach is conceptually analogous to
Gene Set Enrichment Analysis (GSEA), as proposed by Mootha 
and colleagues \cite{Mootha2003a,Subramanian2005}.

In addition we will also show how to correct for multiple hypothesis by
applying the Benjamini and Hochberg method \cite{Benjamini1995}
as implemented in the \Rcode{multtest} R/Bioconductor package.

Finally we will also show where and how to retrieve FGS information, including
providing simple code to cross-reference common gene identifiers.
To achieve all these goals we will need to start by refreshinga few basic
\R commands and concepts.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{{\R}-{\Bioc} analytical packages}

The following {\R} packages were used to perform our analyses
and produce this vignette:
\begin{itemize}
  \item \Rcode{BiocGenerics}: this library implements several generic 
    classes and methods to work with {\Bioc} packages 
    and can be obtained from {\Bioc};
  \item \Rcode{Biobase}: this library implements classes and methods 
    to work with genomic data and can be obtained from {\Bioc};
  \item \Rcode{limma}: this library provide advanced methods to perform
    gene expression analysis from raw data to gene set analysis
    and can be obtained from {\Bioc};
  \item \Rcode{RTopper}: this library implements methods to perform
    integrated gene set analysis across datasets and platforms
    and can be obtained from {\Bioc};
  \item \Rcode{multtest}: this library implements methods to perform
    multiple test correction and can be obtained from {\Bioc};
  \item \Rcode{org.Hs.eg.db}: this library contains human genes annotation
    and can be obtained from {\Bioc};
  \item \Rcode{KEGG.db}: this library contains KEGG pathway annotation
    and can be obtained from {\Bioc};
  \item \Rcode{reactome.db}: this library contains Reactome pathway annotation
    and can be obtained from {\Bioc};
  \item \Rcode{GO.db}: this library contains Gene Ontoogy annotation
    and can be obtained from {\Bioc};
  \item \Rcode{AnnotationDBI} and \Rcode{annotate}:
    these libraries contain classes and methods
    to access and manipulated annotation packages 
    and can be obtained from {\Bioc};
\end{itemize}    


\subsection{Install the packages}

The chunk of {\R} code below can be used to obtain and install 
all necessary packages from \texttt{CRAN}, {\Bioc}, or the website 
repository accompanying this manuscript.
Installing from {\Bioc}:

<<getPackagesBioc, eval=TRUE, echo=TRUE, cache=FALSE>>=
###Source the biocLite.R script from Bioconductor
source("http://bioconductor.org/biocLite.R")
###Get the list of available packages
installedPckgs <- installed.packages()[,"Package"]
###Define the list of desired libraries
pckgListBIOC <- c("BiocGenerics", "Biobase", "limma", "RTopper", 
		  "org.Hs.eg.db", "AnnotationDbi", "annotate", 
		  "multtest", "KEGG.db", "GO.db")
###Load the packages, install them from Bioconductor if needed
for (pckg in pckgListBIOC) {
	if (! pckg %in% installedPckgs) {
		biocLite(pckg, suppressUpdates=TRUE, ask=FALSE)
		}
	require(pckg, character.only=TRUE)
}
@ 

  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%
\section{Gene Set Analysis with RTopper}

\subsection{RTopper data structure}
In this tutorial we will use some of the functions of the \Rcode{RTopper} package.
To this end we will make use of simplified data generated within 
The Cancer Genome Atlas (TCGA) project,
using Glioblastoma Multiforme (GBM) genomics data obtained from the same
patients" cohort using distinct platforms, including Differential Gene Expression (DGE),
Copy Number Variation (CNV), and Differential Methylation (DM).
This data is included with the \Rcode{RTopper} package as the dataset \texttt{exampleData},
which consists of genomic measurements (the list \Rcode{dat}) 
for 500 genes (in rows) and 95 patients (in columns) from 4 distinct platforms:
\begin{enumerate}
  \item DGE obtained using Affymetrix;
  \item DGE obtained using Agilent;
  \item CNV data generated ad Harvard;
  \item CNV data generated ad the MSKCC;
\end{enumerate}

Load the data set type \Rcode{data(sepScores)}, and to view a description of this 
data type \Rcode{?sepScores}. The structure of the data is shown below:

<<loadData,eval=TRUE,echo=TRUE,cache=FALSE>>=
require(RTopper)
data(sepScores)
ls()
class(sepScores)
names(sepScores)
sapply(sepScores, class)
sapply(sepScores,dim)
@


\subsection{Creation of Functional Gene Sets}
Functional Gene Sets (FGS) are list of genes that share a specific biological function.
Examples of FGS are genes that operate in the same signaling pathway 
({\it i.e.} Notch signaling genes), or that share the same biological function
({\it i.e.} Cell adhesion genes).
FGS can be retrieved from various database, or can be construncted {\it ad hoc}.
A convenient source of FGS are the R-Bioconductor metaData packages,
and S4 classes and methods for handling FGS are provided by the \Rcode{GSEABase}
package. Below is shown a simple way to extract FGS from the human genome
metaData package \Rcode{org.Hs.eg.db}.
As a general rule the name of the metaData package, without the \Rcode{.db} extension,
can be used a function to see the content of the package, as shown below:

<<metaData,eval=TRUE,echo=TRUE,cache=FALSE>>=
require(org.Hs.eg.db)
org.Hs.eg()
@ 

For instance the \Rcode{org.Hs.egGO2ALLEGS} environment contains the mapping
of all ENTREZ Gene identifiers to the {\bf Gene Ontology Terms} \cite{Ashburner2000},
while \Rcode{org.Hs.egPATH2EG} maps the identifiers to {\bf KEGG} 
pathways \cite{Kanehisa2004}.
The corresponding lists of FGS can be retrieve from the corresponding environments
using the the {\R} command \Rcode{as.list()}, as shown below for KEGG and GO:

<<listFGS,eval=TRUE,echo=TRUE,cache=FALSE>>=
kegg <- as.list(org.Hs.egPATH2EG)
length(kegg)
str(kegg[1:5])
names(kegg)[1:5]
go <- as.list(org.Hs.egGO2ALLEGS)
length(go)
str(go[1:5])
names(go)[1:5]
@

In the \Rcode{kegg} list genes are identified by their ENTREZ Gene identifiers,
while in the \Rcode{dat} genes are identified by their Gene Symbol.
Below is an example of the code that can be used to perform the identifiers conversion,
using only a subset of KEGG and GO FGS:

<<convertIDs,eval=TRUE,echo=TRUE,cache=FALSE>>=
numberOfFGSkegg <- 200
kegg <- lapply(kegg[sample(1:length(kegg),numberOfFGSkegg)],
               function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
str(kegg[1:5])
### Process GO: keep only Biological Process
length(go)
go <- go[ Ontology(names(go)) == "BP" ]
length(go)
numberOfFGSgo <- 200
go <- lapply(go[sample(1:length(go),numberOfFGSgo)],
             function(x) unique(unlist(mget(x,org.Hs.egSYMBOL))))
str(go[1:5])
@ 

Finally, it is also possible to annotate FGS, mapping pathways identifiers to pathway names,
as shown below for KEGG, using the \Rcode{KEGG.db}.

<<annotateFGS,eval=TRUE,echo=TRUE,cache=FALSE>>=
require(KEGG.db)
KEGG()
names(kegg) <- paste(names(kegg),unlist(mget(names(kegg),KEGGPATHID2NAME)),sep=".")
head(names(kegg), n=10)
@ 

Similarly GO Terms can be retrieved from the \Rcode{GO.db}
(please refer to the vignettes of the corresponding packages for details).

<<listFGS,eval=TRUE,echo=TRUE,cache=FALSE>>=
require(GO.db)
GO()
names(go) <- paste(names(go),Term(names(go)),sep=".")
head(names(go), n=10)
@ 

Finally we can be combine the two FGS collections into a named list for further used
in GSE analysis (see below).

<<listFGS,eval=TRUE,echo=TRUE,cache=FALSE>>=
fgsList <- list(go=go,kegg=kegg)
str(fgsList$go[1:5])
str(fgsList$kegg[1:5])
@ 


\subsection{Gene Set Analysis functions in RTopper}
We will use a gene-to-phenotype score for each platform to perform 
separate GSE analysis for each platform ultimately identifying the FGS most 
strongly associated with the score.

To this end we will use the \Rcode{runBatchGSE} function,
as shown below. This function enables to perform GSE analysis over multiple collections
of FGS, and over multiple ranking statistics.
In the current implementation of the \Rcode{runBatchGSE} the default is
performing the enrichment analysis using the \Rcode{geneSetTest} function 
from the \Rcode{limma} package, and most of the arguments passed to 
\Rcode{runBatchGSE} are indeed passed to \Rcode{geneSetTest}
(see the relative help for the details).

As an alternative the user can also define his own function 
to test for FGS enrichment,
passing the selection of genes within the FGS and the ranking ranking statistics
in the same way as done for \Rcode{geneSetTest}.
In this tutorial we apply \Rcode{geneSetTest} in order to perform a
Wilcoxon rank-sum test, using the absolute value of the gene-to-phenotype scores 
as the ranking statistics.

<<runGSEbatchArgs,eval=TRUE,echo=TRUE,cache=FALSE>>=
args(runBatchGSE)
@ 

Below a short description of the arguments that can be passed to this function:
\begin{itemize}
 \item \Rcode{dataList}: a list containing gene-to-phenotype scores to be used
   as ranking statistics in the GSE analysis;
 \item \Rcode{fgsList}: a list of FGS collection, in which each element is a list of character vectors,
   one for each gene set;
 \item \Rcode{...}: any other argument to be passed to lower level functions, including 
   the lower level  enrichment function to be used (like the \Rcode{geneSetTest} function
   from the \Rcode{limma} package, which is used as the default);
 \item \Rcode{absolute}: logical specifying whether the absolute values of the ranking statistics 
   should be used in the test (the default being TRUE);
 \item \Rcode{gseFunc}: a function to perform GSE analysis, when not specified (the default) the
   \Rcode{geneSetTest} from the \Rcode{limma} package is used. When a function is specified,
   the membership of the analyzed genes to a FGS, and the ranking statistics must be defined in the
   same way this is done for \Rcode{geneSetTest}, and the new function must
   return an integer (usually a p-value) (see the help for \Rcode{geneSetTest}
   in the \Rcode{limma} package)
 \end{itemize}

Below are few examples to perform Wilcoxon rank-sum test over multiple FGS collections,
and over multiple ranking statistics, usin the \Rcode{runBatchGSE}.
To this end we will use the {\bf KEGG} and {\bf GO} collections created above,
and the separate and integrated gene-to-phenotype scores computed using the
\Rcode{computeDrStat}.
The output of this function is a named list of lists, containing an element for each
ranking statistics considered in the input. Each one of these elements, in turn,
is another list, containing the GSE results for each collection sets.
In the examples below we will therefore obtain a list of length one in the case
ot the integrated gene-to-phenotype score, and a list of length four
(on element for each genomic platform) in the case of the separate scores.
For all the rankings we will obtain GSE result for both the collections of FGS.


\subsection{An example}
\subsubsection{One-sided Wilcoxon rank-sum test using absolute ranking statistics}
The individual gene-to-phenotype scores computed for each platform
can be used to perform separate GSE analyses for each considered
genomic platform.
This can be accomplished by calling the \Rcode{runBatchGSE} with default
values, or by specifying each argument, as shown below:

<<runBatchGSE.separate,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseABS.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList)
gseABS.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=TRUE, type="f", alternative="mixed")
@ 


\subsubsection{One-sided Wilcoxon rank-sum test using signed ranking statistics}
When the signed ranking statistics has a sign, it is possible to perform a one-sided
test assensing both tails separately, as well as a two-sided test.
This can be accomplished by passing the corresponding arguments 
to \Rcode{runBatchGSE}, as shown below:

<<runBatchGSE.separate2,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseUP.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=FALSE, type="t", alternative="up")
gseDW.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=FALSE, type="t", alternative="down")
gseBOTH.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=FALSE, type="t", alternative="either")
@ 


\subsubsection{Performing a simulation-based GSE test}
It is also possible to perform an enrichment analysis comparing each FGS
to randomly selected gene lists of the same size of the FGS.
In this case  the p-value is computed by simulation as the proportion 
of times the mean of the statistics in the FGS is smaller (or larger) than in the 
\Rcode{nsim} random simulated sets of genes.

<<runBatchGSE.int3,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseABSsim.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				    absolute=TRUE, type="f", alternative="mixed",
				    ranks.only=FALSE, nsim=1000)
gseUPsim.sep <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				    absolute=FALSE, type="t", alternative="up",
				    ranks.only=FALSE, nsim=1000)
@ 

Results from this analysis are named lists of lists, as shown below:
<<runBatchGSE.format1,echo=TRUE,eval=TRUE,cache=FALSE>>=
str(gseUP.sep[1:5])
head(gseABSsim.sep$dat.affy$go)
head(gseABSsim.sep$dat.affy$kegg)
@ 


\subsubsection{Passsing alternative enrichment functions to  \Rcode{runBatchGSE} }
Below is show how to define and pass alternative enrichment functions 
to \Rcode{runBatchGSE}.
We will first show how to use the \Rcode{limma} \Rcode{wilcoxGST} function,
which is a synonym for \Rcode{geneSetTest} using \Rcode{ranks.only=TRUE}
and \Rcode{type="t"}.

<<runBatchGSE.altFunc,echo=TRUE,eval=TRUE,cache=FALSE>>=
require(limma)
gseUP.sep.2 <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=FALSE, gseFunc=wilcoxGST, alternative="up")
@ 

As shown below this approach will return the same results
obtained with \Rcode{geneSetTest} passing appropriate arguments.

<<runBatchGSE.format2,echo=TRUE,eval=TRUE,cache=FALSE>>=
str(gseUP.sep.2)
all(gseUP.sep.2$go==gseUP.sep$go)
@ 

We can finally also pass any new user-defined enrichment function,
provided that the arguments are passed in the same way as with
\Rcode{geneSetTest}, as shown below using the Fisher"s exact test,
and a  threshold for defining the list of differentially expressed genes.

<<runBatchGSE.altFunc2,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseFunc <- function (selected, statistics, threshold) {
	diffExpGenes <- statistics > threshold
	tab <- table(diffExpGenes, selected)
	pVal <- fisher.test(tab)[["p.value"]]
	}
gseUP.sep.3 <- runBatchGSE(dataList=sepScores, fgsList=fgsList,
				 absolute=FALSE, gseFunc=gseFunc, threshold=7.5)
@ 

As shown below this approach will test for over-represtation of the
a specific gene set within the genes defined as differentially expressed
(in our example the genes showing an integrated association score
larger than 7.5). Results are somewhat comparable to what obtained
using the Wilcoxon rank-sum test.

<<runBatchGSE.format3,echo=TRUE,eval=TRUE,cache=FALSE>>=
str(gseUP.sep.3)
head(data.frame(fisher=gseUP.sep.3$dat.affy$kegg,
                wilcoxon=gseUP.sep$dat.affy$kegg))
@ 


\subsection{Multiple testing correction}
Finally the \Rcode{adjustPvalGSE} enables to adjust the
p-values computed by the \Rcode{runBatchGSE}.
This functions is an interface to the \Rcode{mt.rawp2adjp}
function from the \Rcode{multtest} package.

<<adjustP,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseABS.sep.BH <- adjustPvalGSE(gseABS.sep)
gseABS.sep.holm <- adjustPvalGSE(gseABS.sep, proc = "Holm")
@ 

Also in this case the results after the adjustment are named lists of lists,
as shown below:

<<adjusted.format,echo=TRUE,eval=TRUE,cache=FALSE>>=
names(gseABS.sep.BH)
names(gseABS.sep.holm)
str(gseABS.sep.BH$dat.affy)
str(gseABS.sep.holm$dat.affy)
head(gseABS.sep.BH$dat.affy$go, n=10)
head(gseABS.sep.holm$dat.affy$go, n=10)
@ 


\newpage
Below is the code to produce the p-value histogram
shown in Figure~\ref{fig:figure004}:

\begin{figure}[htbp]
\begin{center}
<<figure004,eval=T,echo=T,cache=F,fig=T,width=4,height=4,include=T,eps=F>>=
hist(gseABS.sep.BH$dat.affy$go[ , "rawp"], nclass=10, col="orange",
     main="P-values")
@ 
\caption[\small P-value histogram]{\small
Histogram for p-values before multiple testing correction.
}
\label{fig:figure004}
\end{center}
\end{figure}

\newpage
Below is the code to produce the q-value histogram
shown in Figure~\ref{fig:figure005}:

\begin{figure}[htbp]
\begin{center}
<<figure005,eval=T,echo=T,cache=F,fig=T,width=4,height=4,include=T,eps=F>>=
hist(gseABS.sep.BH$dat.affy$go[ , "BH"], nclass=10, col="orange",
     main="Q-values")
@ 
\caption[\small P-value histogram]{\small
Histogram for q-values after multiple testing correction
with the Benjamini-Hochberg method.
}
\label{fig:figure005}
\end{center}
\end{figure}


\newpage
\section{Another example with a list of genes}
We will now use our function to perform GSA with a list of
autism candidate genes. This gene list is stored in the file
{\bf \texttt{"./myData/101symbols\_v02.txt"}}.
We will define a new function \Rcode{formatGeneList}
to prepare the data for the analysis.
We will compare our list against all the annotated
genes present in the genome (according to the information
contained in the \Rcode{org.Hs.eg.db}),
using the previously defined function based n the Fisher's Exact test.
First of all, however, we will read the least of genes in the {\R} session
and process the data to have them in the correct format.

<<readAndProcessData,echo=TRUE,eval=TRUE,cache=FALSE>>=
autismGenes <- read.table("myData/101symbols_v02.txt", sep="\t", header=TRUE,
                          colClasses="character")
str(autismGenes)
@ 

The new function \Rcode{formatGeneList} will take
two lists of genes:
\begin{itemize}
\item The gene list of interest;
\item The "background" gene list (i.e. the "gene space");
\end{itemize}

As follows:

<<newFunctionForLists,echo=TRUE,eval=TRUE,cache=FALSE>>=
formatGeneList <- function (geneList, allGenes) {
  stats <- 1* allGenes %in% geneList
  names(stats) <- allGenes
  out <- list(GeneList = stats)
	}
@

And now we can prepare the data:

<<formatTheGeneLsit,echo=TRUE,eval=TRUE,cache=FALSE>>=
allGenes <- unique(unlist(as.list(org.Hs.egSYMBOL)))
str(allGenes)
geneMembership <- formatGeneList(autismGenes$SYMBOL, allGenes)
str(geneMembership)
table(geneMembership$GeneList)
@

And now we can run the enrichment analysis:

<<runBatchGSE.altFunc3,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseMyList <- runBatchGSE(dataList=geneMembership, fgsList=fgsList,
				 absolute=FALSE, gseFunc=gseFunc, threshold=0.5)
@ 


Let's look at the results:

<<showTheResults,echo=TRUE,eval=TRUE,cache=FALSE>>=
str(gseMyList)
str(gseMyList$GeneList$kegg)
summary(gseMyList$GeneList$kegg)
table(is.na(gseMyList$GeneList$kegg))
table(gseMyList$GeneList$kegg < 0.01)
table(gseMyList$GeneList$go < 0.01)
@

And now we can correct for multiple testing:

<<adjustP.2,echo=TRUE,eval=TRUE,cache=FALSE>>=
gseMyList.BH <- adjustPvalGSE(gseMyList)
gseMyList.BH$GeneList$go[ gseMyList.BH$GeneList$go[, "BH"] < 0.01 , ]
gseMyList.BH$GeneList$kegg[ gseMyList.BH$GeneList$kegg[, "BH"] < 0.01 , ]
@ 



\section{System Information}
Session information:

<<sessioInfo,echo=TRUE,eval=TRUE,cache=FALSE>>=
sessionInfo()
@ 

\pagebreak
\section{References}
   \bibliographystyle{unsrt}
   \bibliography{GeneSetAnalysis}

\end{document}


